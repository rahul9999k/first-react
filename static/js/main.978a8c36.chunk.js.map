{"version":3,"sources":["Components/Navbar.js","Components/Textform.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","class","onClick","togglemode","for","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","concat","split","length","Alert","alert","word","lower","charAt","slice","Captilize","msg","App","setmode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.978a8c36.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  \r\n    return (\r\n<>\r\n<nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/about\">About</a>\r\n        </li>\r\n        <li className=\"nav-item dropdown\">\r\n          <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n            Dropdown\r\n          </a>\r\n          <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n            <li><a className=\"dropdown-item\" href=\"#\">Action</a></li>\r\n            <li><a className=\"dropdown-item\" href=\"#\">Another action</a></li>\r\n            <li><hr className=\"dropdown-divider\"/></li>\r\n            <li><a className=\"dropdown-item\" href=\"#\">Something else here</a></li>\r\n          </ul>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link disabled\">Disabled</a>\r\n        </li>\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div class={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input class=\"form-check-input\" type=\"checkbox\" onClick={props.togglemode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n</>\r\n\r\n    )\r\n}\r\nNavbar.propTypes={\r\n    title : PropTypes.string,\r\n}","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase was clicked: \" +  text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase\",\"primary\")\r\n    }\r\n    const handleLoClick = ()=>{\r\n        // console.log(\"Uppercase was clicked: \" +  text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase\",\"primary\")\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On change\");\r\n        setText(event.target.value)\r\n        \r\n\r\n    }\r\n    const handleClearClick= ()=>{\r\n        setText(\"\")\r\n        props.showAlert(\"Text Cleared\",\"primary\")\r\n\r\n    }\r\n    const handleCopyClick =()=>{\r\n        setText(text.concat(text))\r\n        props.showAlert(\"Text Copied\",\"primary\")\r\n    }\r\n\r\n    const [text, setText] = useState(''); \r\n    // text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\"> \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" style={{color: props.mode==='dark'?'white':'#042743',backgroundColor: props.mode==='dark'?'#042743':'white'}}rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopyClick}>Copy duplicate</button>\r\n            \r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(\" \").length} Minutes read</p>\r\n            <h2>Priview</h2>\r\n            <p>{text.length>0?text:\"Enter something in the TextBox to see the priview\"}</p>\r\n            <p></p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const Captilize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1)\r\n      }\r\n    return (\r\n        \r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{Captilize(props.alert.type)}</strong>:{props.alert.msg}\r\n        \r\n      </div>\r\n        \r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/Textform';\nimport Alert from './Components/Alert';\n// import About from './Components/About';\nimport React, { useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n\n\n\nfunction App() {\n  const [mode, setmode]= useState('light'); \n \n  const[alert, setAlert]=useState(null);\n  const showAlert= (message, type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null)\n    },2000);\n  }\n\n  \n  \n  const toggleMode = ()=>{\n    if (mode === \"dark\"){\n      setmode(\"light\")\n      document.body.style.backgroundColor=\"white\"\n      showAlert(\"Dark mode enabled\",\"danger\")\n      document.title=\"TextUtils-Dark Mode\"\n    }\n    else{\n      setmode(\"dark\")\n      document.body.style.backgroundColor=\"#042743\"\n      showAlert(\"light mode enabled\",\"success\")\n      document.title=\"TextUtils-Light Mode\"\n    }\n  }\n  return (\n<>\n{/* <Router> */}\n  <Navbar title=\"Navbar\" mode={mode} togglemode={toggleMode}/>\n  <Alert alert={alert}/>\n  <TextForm mode={mode} showAlert={showAlert}/>\n  {/* <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n            \n          </Route>\n        </Switch>\n  \n  </Router> */}\n  </>\n\n\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}